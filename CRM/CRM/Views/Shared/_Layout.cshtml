<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - My ASP.NET Application</title>
    @Html.Action("GetStyle", "Style")
    @*<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">*@
    <link rel="stylesheet" href="~/Content/animate.css">
    <link rel="stylesheet" href="~/Content/bootstrap-datetimepicker.min.css">
    <link rel="stylesheet" href="~/Content/Site.css">
    @*@Styles.Render("~/Content/css")*@
    @Scripts.Render("~/bundles/modernizr")

    <script type = 'text/javascript' >
        var appInsights=window.appInsights||function(config)
        {
            function r(config){ t[config] = function(){ var i = arguments; t.queue.push(function(){ t[config].apply(t, i)})} }
            var t = { config:config},u=document,e=window,o='script',s=u.createElement(o),i,f;for(s.src=config.url||'//az416426.vo.msecnd.net/scripts/a/ai.0.js',u.getElementsByTagName(o)[0].parentNode.appendChild(s),t.cookie=u.cookie,t.queue=[],i=['Event','Exception','Metric','PageView','Trace','Ajax'];i.length;)r('track'+i.pop());return r('setAuthenticatedUserContext'),r('clearAuthenticatedUserContext'),config.disableExceptionTracking||(i='onerror',r('_'+i),f=e[i],e[i]=function(config, r, u, e, o) { var s = f && f(config, r, u, e, o); return s !== !0 && t['_' + i](config, r, u, e, o),s}),t
        }({
            instrumentationKey:'10389228-3c4e-44fe-91b7-93de363084b1'
        });
        
        window.appInsights=appInsights;
        appInsights.trackPageView();
    </script>
</head>

<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>

                <img id="logo-black" src="~/Content/img/feather_black.png" />
                <img id="logo" src="~/Content/img/feather.png" />
            </div>
            <div class="navbar-collapse collapse">

                <ul class="nav navbar-nav">
                    @Html.ActionLink("Fly Client", "Index", "Customer", new { area = "" }, new { @class = "navbar-brand", id = "logo-font" })

                </ul>
                @Html.Partial("_LoginPartial")
            </div>
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()

        <div id="chat-div">
            <div id="chat-header">
                <div id="chat-header-name"></div>
                <span class="glyphicon glyphicon-remove" id="js-exit-chat"></span>
            </div>
            <div id="js-messages-holder">
                


            </div>
            
            <span id="chat-input">
                <input type="text" class="form-control" placeholder="enter chat message" id="js-chat-input">
                <span class="btn btn-success" id="js-send-chat-message">Send</span>
            </span>

        </div>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

    <script type="template" id="notifications-template">
        <ul>
            <%
                _.each(notifications, function(notification){%>
                    <li><%= notification.Body %></li>
                    
                <%})
                %><li id="mark-as-read">Mark Notifications as Read</li><%

            %>

        </ul>
    </script>
    <script>


        $(document).ready(function () {

            $.getJSON("/api/UserNotificationApi/GetNotifications", function (notifications) {
                if (notifications.length == 0) {
                    return;
                }

                $(".js-notification-count").text(notifications.length).removeClass("hide").addClass("animated bounce");

                //NOTIFICATIONS POPOVER
                $(".notifications").popover({
                    html: true,
                    title: "Notifications",
                    content: function () {
                        var compiled = _.template($("#notifications-template").html());

                        return compiled({ notifications: notifications });

                    },
                    placement: "bottom"

                });

            });


            //HIDE NOTIFICATIONS POPOVER
            $('body').on('click', function (e) {
                $('[data-original-title]').each(function () {
                    //the 'is' for buttons that trigger popups
                    //the 'has' for icons within a button that triggers a popup
                    if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
                        $(this).popover('hide');

                    }
                });
            });


            //Uncaught ReferenceError: e is not defined--not sure why the below does not work
            //$('body').on('click', hideNotifications (e));



            $(document.body).on("click", "#mark-as-read", function () {
                $.ajax({
                    url: "/api/UserNotificationApi/DeleteAll",
                    method: "DELETE"
                })
                 .done(function () {
                     //alert("Deleted!");
                     $(".js-notification-count").addClass("hide");
                     $(".popover-content ul li").fadeOut(function () {
                         $(".popover").hide();
                     });
                 }).fail(function () {
                     alert("Something Went Wrong!!!");
                 });
            })


            //replace logo img with black one when hovering
            $("#logo-font").hover(function () {
                $("#logo-black").toggle();
                $("#logo").toggle();
            });

            //provide dt picker on create/edit forms
            $("#datetimepicker").datetimepicker({
                sideBySide: true
            });




        });



        //CHAT MESSAGE FEATURE BETA HERE***************************************

        //anna: 7aa736a7-6776-41b0-b14a-3ac656b616d8
        //cran: a7058f32-5435-46f1-a777-90e89369dd67


        var chatPartner;
        var chatPartnerName;

        var chatSessionInterval;
        var chatMessagesInterval;
        var currentSessionIsActive = false;

        checkForCurrentSession();
        
        function updateScroll() {

            $("#js-messages-holder").animate({
                scrollTop: $("#js-messages-holder")[0].scrollHeight}, 200);

        }

        function getChatMessages() {
            
            //var chatPartner = $("#js-chat-partner").val();
            $.ajax({
                url: "/api/ChatMessagesApi/GetMessages/" + chatPartner,
                cache: false,
                success: function (html) {
                    console.log(html);
                    if (html.length == 0) {
                        return;
                    }

                    
                    for (var i in html) {
                        //check for ending chat session(sending ID as body)
                        if (html[i]["Body"] == html[i]["ReceiverId"]) {
                            $("#js-messages-holder").append("<div id='end-chat-message'>" + "<i>" + chatPartnerName +" has ended this chat session" + "</i>" + "</div>");
                            currentSessionIsActive = false;
                            clearInterval(chatMessagesInterval);
                            return;
                        }


                        $("#js-messages-holder").append("<div>" + "<strong>" + chatPartnerName + ": " +"</strong>" + html[i]["Body"] + "</div>");
                        updateScroll();
                    }

                    

                }
            });
        }


        //this should run once at page load
        //if there are no currently active session,
        //then upon success, checkChatSession should be called
        function checkForCurrentSession() {
            $.ajax({
                url: "/api/ChatMessagesApi/GetChatSession",
                cache: false,
                success: function (listSession) {
                    if (listSession.length == 0) {
                        console.log("no chat sessions!");
                        chatSessionInterval = setInterval(checkChatSession, 2500);
                        return;
                    }
                    else {
                       
                        if(listSession[0]["SenderId"] == listSession[0]["RequestingUser"]){
                            chatPartner = listSession[0]["ReceiverId"];
                            chatPartnerName = listSession[0]["RecipientName"];
                        }
                        else {
                            chatPartner = listSession[0]["SenderId"];
                            chatPartnerName = listSession[0]["RequesterName"];
                        }
                        currentSessionIsActive = true;
                        $("#chat-div").toggle();
                        $("#chat-header-name").text(chatPartnerName);
                        chatMessagesInterval = setInterval(getChatMessages, 1000);
                    }

                }
            })
        }


        //checks whether your chat partner is in a chat session
        function checkPartnerForSession(message) {
            $.ajax({
                url: "/api/ChatMessagesApi/GetPartnerSession/" + chatPartner,
                cache: false,
                success: function (listSession) {
                    if (listSession.length == 0) {
                        //go ahead, then
                        $.ajax({
                            type: "POST",
                            url: "/api/ChatMessagesApi/StartChatSession",
                            data: { ReceiverId: chatPartner }

                        })
                         .done(function () {
                             currentSessionIsActive = true;
                             chatMessagesInterval = setInterval(getChatMessages, 1000);
                             sendMessage(message);
                         }).fail(function () {
                             $("#js-messages-holder").append("<div>" + "Chat failed. Other user may now be in chat." + "</div>");
                             alert("Something Went Wrong!!!");
                         });


                        return;
                    }
                    else {
                        $("#js-messages-holder").append("<div>" + "Chat failed. " +  chatPartnerName + " is now in a chat." + "</div>");
                        chatSessionInterval = setInterval(checkChatSession, 2500);
                        chatPartner = "";
                        chatPartnerName = "";
                    }

                }
            })
        }



        //this only checks for receiving chats
        function checkChatSession() {
            $.ajax({
                url: "/api/ChatMessagesApi/GetChatSession",
                cache: false,
                success: function (listSession) {
                    if (listSession.length == 0) {
                        console.log("checked chat session, none to be found");
                        return;
                    }
                    $("#chat-div").toggle();
                    //stop checking sessions
                    clearInterval(chatSessionInterval);
                    console.log(listSession);
                    //set partner ID to what is received
                    chatPartner = listSession[0]["SenderId"];
                    chatPartnerName = listSession[0]["RequesterName"];
                    //start checking for messages
                    chatMessagesInterval = setInterval(getChatMessages, 1000);
                    currentSessionIsActive = true;
                    $("#chat-header-name").text(chatPartnerName);
                   
                }
            })
        }



        $(document.body).on("click", "#js-exit-chat", function () {

            if (!currentSessionIsActive) {
                $("#chat-div").toggle();

                chatSessionInterval = setInterval(checkChatSession, 2500);
                console.log("yep this was called");
                return;
            }


            bootbox.confirm("Are you sure you want to end the chat?", function (result) {
                if (result) {

                    $.ajax({
                        type: "POST",
                        url: "/api/ChatMessagesApi/PostMessage",
                        data: { ReceiverId: chatPartner, Body: chatPartner }

                    })
                     .done(function () {
                         //$("#js-messages-holder").append("<div>" + "You have ended the chat session " + "</div>");
                         $.ajax({
                             url: "/api/ChatMessagesApi/EndChatSession",
                             method: "PATCH"
                         }).done(function () {
                             $("#chat-div").toggle();
                             clearInterval(chatMessagesInterval);
                             chatSessionInterval = setInterval(checkChatSession, 2500);
                             currentSessionIsActive = false;
                         })
                         //alert("sent!");
                     }).fail(function () {
                         alert("Something Went Wrong!!!");
                     });

                }
            })

        });


        //this selects user to chat with, clears chatSession interval
        //(stops checking for incoming chat requests) and shows chat box
        function beginChat() {
            clearInterval(chatSessionInterval);
            //var radioValue = $("input[name='gender']:checked").val();
            chatPartner = $("input[name='chat-partner']:checked").val();
            chatPartnerName = $("input[name='chat-partner']:checked").attr("chat-name");
            $("#chat-div").toggle();
            $("#chat-header-name").text(chatPartnerName);
        }

        //send first message?




        function sendMessage(message) {
            $.ajax({
                type: "POST",
                url: "/api/ChatMessagesApi/PostMessage",
                data: { ReceiverId: chatPartner, Body: message }

            })
            .done(function () {
                $("#js-messages-holder").append("<div>" + "<strong>" + "You: " + "</strong>" + message + "</div>");
                updateScroll();
                //alert("sent!");
            }).fail(function () {
                alert("Something Went Wrong!!!");
            });
        }


        function sendEvent() {
            var message = $("#js-chat-input").val();
            $("#js-chat-input").val("");

            if (currentSessionIsActive == false) {
                checkPartnerForSession(message);
            }
            else {

                console.log("message: ", message, "partner: ", chatPartner);
                sendMessage(message);
            }
        }



        $(document.body).on("click", "#js-begin-chat", beginChat);
      

        //this handles submission of message if user hits 'ENTER'
        $("#js-chat-input").keypress(function (event) {
            if (event.which == 13) {
                event.preventDefault();
                sendEvent();
            }
        });

        //this handles submission of message if user clicks 'SEND' button
        $(document.body).on("click", "#js-send-chat-message", function () {
            sendEvent();
        })


    </script>
</body>
</html>


